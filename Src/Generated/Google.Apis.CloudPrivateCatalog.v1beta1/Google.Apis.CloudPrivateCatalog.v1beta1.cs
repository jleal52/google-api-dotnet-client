// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.42.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Cloud Private Catalog API Version v1beta1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://cloud.google.com/private-catalog/'>Cloud Private Catalog API</a>
 *      <tr><th>API Version<td>v1beta1
 *      <tr><th>API Rev<td>20191118 (1782)
 *      <tr><th>API Docs
 *          <td><a href='https://cloud.google.com/private-catalog/'>
 *              https://cloud.google.com/private-catalog/</a>
 *      <tr><th>Discovery Name<td>cloudprivatecatalog
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Cloud Private Catalog API can be found at
 * <a href='https://cloud.google.com/private-catalog/'>https://cloud.google.com/private-catalog/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.CloudPrivateCatalog.v1beta1
{
    /// <summary>The CloudPrivateCatalog Service.</summary>
    public class CloudPrivateCatalogService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1beta1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public CloudPrivateCatalogService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public CloudPrivateCatalogService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            folders = new FoldersResource(this);
            organizations = new OrganizationsResource(this);
            projects = new ProjectsResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "cloudprivatecatalog"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
        #if NETSTANDARD1_3 || NETSTANDARD2_0 || NET45
            get { return BaseUriOverride ?? "https://cloudprivatecatalog.googleapis.com/"; }
        #else
            get { return "https://cloudprivatecatalog.googleapis.com/"; }
        #endif
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://cloudprivatecatalog.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif

        /// <summary>Available OAuth 2.0 scopes for use with the Cloud Private Catalog API.</summary>
        public class Scope
        {
            /// <summary>View and manage your data across Google Cloud Platform services</summary>
            public static string CloudPlatform = "https://www.googleapis.com/auth/cloud-platform";

        }

        /// <summary>Available OAuth 2.0 scope constants for use with the Cloud Private Catalog API.</summary>
        public static class ScopeConstants
        {
            /// <summary>View and manage your data across Google Cloud Platform services</summary>
            public const string CloudPlatform = "https://www.googleapis.com/auth/cloud-platform";

        }



        private readonly FoldersResource folders;

        /// <summary>Gets the Folders resource.</summary>
        public virtual FoldersResource Folders
        {
            get { return folders; }
        }

        private readonly OrganizationsResource organizations;

        /// <summary>Gets the Organizations resource.</summary>
        public virtual OrganizationsResource Organizations
        {
            get { return organizations; }
        }

        private readonly ProjectsResource projects;

        /// <summary>Gets the Projects resource.</summary>
        public virtual ProjectsResource Projects
        {
            get { return projects; }
        }
    }

    ///<summary>A base abstract class for CloudPrivateCatalog requests.</summary>
    public abstract class CloudPrivateCatalogBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new CloudPrivateCatalogBaseServiceRequest instance.</summary>
        protected CloudPrivateCatalogBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes CloudPrivateCatalog parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "folders" collection of methods.</summary>
    public class FoldersResource
    {
        private const string Resource = "folders";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public FoldersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            catalogs = new CatalogsResource(service);
            products = new ProductsResource(service);
            versions = new VersionsResource(service);

        }

        private readonly CatalogsResource catalogs;

        /// <summary>Gets the Catalogs resource.</summary>
        public virtual CatalogsResource Catalogs
        {
            get { return catalogs; }
        }

        /// <summary>The "catalogs" collection of methods.</summary>
        public class CatalogsResource
        {
            private const string Resource = "catalogs";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public CatalogsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. It can be in following formats:
            ///
            /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. It can be in following formats:
                ///
                /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchCatalogs that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the catalogs. The supported queries are:
                ///
                /// * Get a single catalog: `name=catalogs/{catalog_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/catalogs:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^folders/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly ProductsResource products;

        /// <summary>Gets the Products resource.</summary>
        public virtual ProductsResource Products
        {
            get { return products; }
        }

        /// <summary>The "products" collection of methods.</summary>
        public class ProductsResource
        {
            private const string Resource = "products";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public ProductsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchProducts that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the products.
                ///
                /// The supported queries are: * List products of all catalogs: empty * List products under a catalog:
                /// `parent=catalogs/{catalog_id}` * Get a product by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/products:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^folders/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly VersionsResource versions;

        /// <summary>Gets the Versions resource.</summary>
        public virtual VersionsResource Versions
        {
            get { return versions; }
        }

        /// <summary>The "versions" collection of methods.</summary>
        public class VersionsResource
        {
            private const string Resource = "versions";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public VersionsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchVersions that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the versions. Required.
                ///
                /// The supported queries are: * List versions under a product:
                /// `parent=catalogs/{catalog_id}/products/{product_id}` * Get a version by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}/versions/{version_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/versions:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^folders/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
    }

    /// <summary>The "organizations" collection of methods.</summary>
    public class OrganizationsResource
    {
        private const string Resource = "organizations";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public OrganizationsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            catalogs = new CatalogsResource(service);
            products = new ProductsResource(service);
            versions = new VersionsResource(service);

        }

        private readonly CatalogsResource catalogs;

        /// <summary>Gets the Catalogs resource.</summary>
        public virtual CatalogsResource Catalogs
        {
            get { return catalogs; }
        }

        /// <summary>The "catalogs" collection of methods.</summary>
        public class CatalogsResource
        {
            private const string Resource = "catalogs";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public CatalogsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. It can be in following formats:
            ///
            /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. It can be in following formats:
                ///
                /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchCatalogs that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the catalogs. The supported queries are:
                ///
                /// * Get a single catalog: `name=catalogs/{catalog_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/catalogs:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^organizations/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly ProductsResource products;

        /// <summary>Gets the Products resource.</summary>
        public virtual ProductsResource Products
        {
            get { return products; }
        }

        /// <summary>The "products" collection of methods.</summary>
        public class ProductsResource
        {
            private const string Resource = "products";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public ProductsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchProducts that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the products.
                ///
                /// The supported queries are: * List products of all catalogs: empty * List products under a catalog:
                /// `parent=catalogs/{catalog_id}` * Get a product by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/products:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^organizations/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly VersionsResource versions;

        /// <summary>Gets the Versions resource.</summary>
        public virtual VersionsResource Versions
        {
            get { return versions; }
        }

        /// <summary>The "versions" collection of methods.</summary>
        public class VersionsResource
        {
            private const string Resource = "versions";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public VersionsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchVersions that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the versions. Required.
                ///
                /// The supported queries are: * List versions under a product:
                /// `parent=catalogs/{catalog_id}/products/{product_id}` * Get a version by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}/versions/{version_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/versions:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^organizations/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
    }

    /// <summary>The "projects" collection of methods.</summary>
    public class ProjectsResource
    {
        private const string Resource = "projects";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public ProjectsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            catalogs = new CatalogsResource(service);
            products = new ProductsResource(service);
            versions = new VersionsResource(service);

        }

        private readonly CatalogsResource catalogs;

        /// <summary>Gets the Catalogs resource.</summary>
        public virtual CatalogsResource Catalogs
        {
            get { return catalogs; }
        }

        /// <summary>The "catalogs" collection of methods.</summary>
        public class CatalogsResource
        {
            private const string Resource = "catalogs";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public CatalogsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. It can be in following formats:
            ///
            /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Catalog resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. It can be in following formats:
                ///
                /// * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchCatalogs that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the catalogs. The supported queries are:
                ///
                /// * Get a single catalog: `name=catalogs/{catalog_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/catalogs:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^projects/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly ProductsResource products;

        /// <summary>Gets the Products resource.</summary>
        public virtual ProductsResource Products
        {
            get { return products; }
        }

        /// <summary>The "products" collection of methods.</summary>
        public class ProductsResource
        {
            private const string Resource = "products";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public ProductsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Product resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>A pagination token returned from a previous call to SearchProducts that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The query to filter the products.
                ///
                /// The supported queries are: * List products of all catalogs: empty * List products under a catalog:
                /// `parent=catalogs/{catalog_id}` * Get a product by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/products:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^projects/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly VersionsResource versions;

        /// <summary>Gets the Versions resource.</summary>
        public virtual VersionsResource Versions
        {
            get { return versions; }
        }

        /// <summary>The "versions" collection of methods.</summary>
        public class VersionsResource
        {
            private const string Resource = "versions";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public VersionsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            /// <param name="resource">Required. The name of the resource context. See SearchCatalogsRequest.resource for
            /// details.</param>
            public virtual SearchRequest Search(string resource)
            {
                return new SearchRequest(service, resource);
            }

            /// <summary>Search Version resources that consumers have access to, within the scope of the consumer cloud
            /// resource hierarchy context.</summary>
            public class SearchRequest : CloudPrivateCatalogBaseServiceRequest<Google.Apis.CloudPrivateCatalog.v1beta1.Data.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse>
            {
                /// <summary>Constructs a new Search request.</summary>
                public SearchRequest(Google.Apis.Services.IClientService service, string resource)
                    : base(service)
                {
                    Resource = resource;
                    InitParameters();
                }


                /// <summary>Required. The name of the resource context. See SearchCatalogsRequest.resource for
                /// details.</summary>
                [Google.Apis.Util.RequestParameterAttribute("resource", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Resource { get; private set; }

                /// <summary>The query to filter the versions. Required.
                ///
                /// The supported queries are: * List versions under a product:
                /// `parent=catalogs/{catalog_id}/products/{product_id}` * Get a version by name:
                /// `name=catalogs/{catalog_id}/products/{product_id}/versions/{version_id}`</summary>
                [Google.Apis.Util.RequestParameterAttribute("query", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Query { get; set; }

                /// <summary>A pagination token returned from a previous call to SearchVersions that indicates where
                /// this listing should continue from. This field is optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of entries that are requested.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "search"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+resource}/versions:search"; }
                }

                /// <summary>Initializes Search parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "resource", new Google.Apis.Discovery.Parameter
                        {
                            Name = "resource",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^projects/[^/]+$",
                        });
                    RequestParameters.Add(
                        "query", new Google.Apis.Discovery.Parameter
                        {
                            Name = "query",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
    }
}

namespace Google.Apis.CloudPrivateCatalog.v1beta1.Data
{    

    /// <summary>The readonly representation of a catalog computed with a given resource context.</summary>
    public class GoogleCloudPrivatecatalogV1beta1Catalog : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Output only. The time when the catalog was created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("createTime")]
        public virtual object CreateTime { get; set; } 

        /// <summary>Output only. The description of the catalog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>Output only. The descriptive name of the catalog as it appears in UIs.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
        public virtual string DisplayName { get; set; } 

        /// <summary>Output only. The resource name of the target catalog, in the format of
        /// `catalogs/{catalog_id}'.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Output only. The time when the catalog was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual object UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The readonly representation of a product computed with a given resource context.</summary>
    public class GoogleCloudPrivatecatalogV1beta1Product : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Output only. The type of the product asset. It can be one of the following values:
        ///
        /// * `google.deploymentmanager.Template` * `google.cloudprivatecatalog.ListingOnly`</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("assetType")]
        public virtual string AssetType { get; set; } 

        /// <summary>Output only. The time when the product was created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("createTime")]
        public virtual object CreateTime { get; set; } 

        /// <summary>Output only. The display metadata to describe the product. The JSON schema of the metadata differs
        /// by Product.asset_type. When the type is `google.deploymentmanager.Template`, the schema is as follows:
        ///
        /// ``` "$schema": http://json-schema.org/draft-04/schema# type: object properties: name: type: string
        /// minLength: 1 maxLength: 64 description: type: string minLength: 1 maxLength: 2048 tagline: type: string
        /// minLength: 1 maxLength: 100 support_info: type: string minLength: 1 maxLength: 2048 creator: type: string
        /// minLength: 1 maxLength: 100 documentation: type: array items: type: object properties: url: type: string
        /// pattern: "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]" title: type: string minLength: 1
        /// maxLength: 64 description: type: string minLength: 1 maxLength: 2048 required: - name - description
        /// additionalProperties: false
        ///
        /// ```
        ///
        /// When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema is as follows:
        ///
        /// ``` "$schema": http://json-schema.org/draft-04/schema# type: object properties: name: type: string
        /// minLength: 1 maxLength: 64 description: type: string minLength: 1 maxLength: 2048 tagline: type: string
        /// minLength: 1 maxLength: 100 support_info: type: string minLength: 1 maxLength: 2048 creator: type: string
        /// minLength: 1 maxLength: 100 documentation: type: array items: type: object properties: url: type: string
        /// pattern: "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]" title: type: string minLength: 1
        /// maxLength: 64 description: type: string minLength: 1 maxLength: 2048 signup_url: type: string pattern:
        /// "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]" required: - name - description -
        /// signup_url additionalProperties: false ```</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("displayMetadata")]
        public virtual System.Collections.Generic.IDictionary<string,object> DisplayMetadata { get; set; } 

        /// <summary>Output only. The icon URI of the product.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("iconUri")]
        public virtual string IconUri { get; set; } 

        /// <summary>Output only. The resource name of the target product, in the format of `products/a-z*[a-z0-9]'.
        ///
        /// A unique identifier for the product under a catalog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Output only. The time when the product was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual object UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response message for PrivateCatalog.SearchCatalogs.</summary>
    public class GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The `Catalog`s computed from the resource context.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("catalogs")]
        public virtual System.Collections.Generic.IList<GoogleCloudPrivatecatalogV1beta1Catalog> Catalogs { get; set; } 

        /// <summary>A pagination token returned from a previous call to SearchCatalogs that indicates from where
        /// listing should continue. This field is optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response message for PrivateCatalog.SearchProducts.</summary>
    public class GoogleCloudPrivatecatalogV1beta1SearchProductsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A pagination token returned from a previous call to SearchProducts that indicates from where
        /// listing should continue. This field is optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The `Product` resources computed from the resource context.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("products")]
        public virtual System.Collections.Generic.IList<GoogleCloudPrivatecatalogV1beta1Product> Products { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response message for PrivateCatalog.SearchVersions.</summary>
    public class GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A pagination token returned from a previous call to SearchVersions that indicates from where the
        /// listing should continue. This field is optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The `Version` resources computed from the resource context.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("versions")]
        public virtual System.Collections.Generic.IList<GoogleCloudPrivatecatalogV1beta1Version> Versions { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The consumer representation of a version which is a child resource under a `Product` with asset
    /// data.</summary>
    public class GoogleCloudPrivatecatalogV1beta1Version : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Output only. The asset which has been validated and is ready to be provisioned. See
        /// google.cloud.privatecatalogproducer.v1beta.Version.asset for details.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("asset")]
        public virtual System.Collections.Generic.IDictionary<string,object> Asset { get; set; } 

        /// <summary>Output only. The time when the version was created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("createTime")]
        public virtual object CreateTime { get; set; } 

        /// <summary>Output only. The user-supplied description of the version. Maximum of 256 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>Output only. The resource name of the version, in the format
        /// `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.
        ///
        /// A unique identifier for the version under a product.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Output only. The time when the version was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual object UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
