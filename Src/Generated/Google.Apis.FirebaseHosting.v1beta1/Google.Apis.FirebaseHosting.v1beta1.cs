// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.42.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Firebase Hosting API Version v1beta1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://firebase.google.com/docs/hosting/'>Firebase Hosting API</a>
 *      <tr><th>API Version<td>v1beta1
 *      <tr><th>API Rev<td>20191126 (1790)
 *      <tr><th>API Docs
 *          <td><a href='https://firebase.google.com/docs/hosting/'>
 *              https://firebase.google.com/docs/hosting/</a>
 *      <tr><th>Discovery Name<td>firebasehosting
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Firebase Hosting API can be found at
 * <a href='https://firebase.google.com/docs/hosting/'>https://firebase.google.com/docs/hosting/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.FirebaseHosting.v1beta1
{
    /// <summary>The FirebaseHosting Service.</summary>
    public class FirebaseHostingService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1beta1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public FirebaseHostingService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public FirebaseHostingService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            sites = new SitesResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "firebasehosting"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
        #if NETSTANDARD1_3 || NETSTANDARD2_0 || NET45
            get { return BaseUriOverride ?? "https://firebasehosting.googleapis.com/"; }
        #else
            get { return "https://firebasehosting.googleapis.com/"; }
        #endif
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://firebasehosting.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif

        /// <summary>Available OAuth 2.0 scopes for use with the Firebase Hosting API.</summary>
        public class Scope
        {
            /// <summary>View and manage your data across Google Cloud Platform services</summary>
            public static string CloudPlatform = "https://www.googleapis.com/auth/cloud-platform";

            /// <summary>View your data across Google Cloud Platform services</summary>
            public static string CloudPlatformReadOnly = "https://www.googleapis.com/auth/cloud-platform.read-only";

            /// <summary>View and administer all your Firebase data and settings</summary>
            public static string Firebase = "https://www.googleapis.com/auth/firebase";

            /// <summary>View all your Firebase data and settings</summary>
            public static string FirebaseReadonly = "https://www.googleapis.com/auth/firebase.readonly";

        }

        /// <summary>Available OAuth 2.0 scope constants for use with the Firebase Hosting API.</summary>
        public static class ScopeConstants
        {
            /// <summary>View and manage your data across Google Cloud Platform services</summary>
            public const string CloudPlatform = "https://www.googleapis.com/auth/cloud-platform";

            /// <summary>View your data across Google Cloud Platform services</summary>
            public const string CloudPlatformReadOnly = "https://www.googleapis.com/auth/cloud-platform.read-only";

            /// <summary>View and administer all your Firebase data and settings</summary>
            public const string Firebase = "https://www.googleapis.com/auth/firebase";

            /// <summary>View all your Firebase data and settings</summary>
            public const string FirebaseReadonly = "https://www.googleapis.com/auth/firebase.readonly";

        }



        private readonly SitesResource sites;

        /// <summary>Gets the Sites resource.</summary>
        public virtual SitesResource Sites
        {
            get { return sites; }
        }
    }

    ///<summary>A base abstract class for FirebaseHosting requests.</summary>
    public abstract class FirebaseHostingBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new FirebaseHostingBaseServiceRequest instance.</summary>
        protected FirebaseHostingBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes FirebaseHosting parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "sites" collection of methods.</summary>
    public class SitesResource
    {
        private const string Resource = "sites";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public SitesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            domains = new DomainsResource(service);
            releases = new ReleasesResource(service);
            versions = new VersionsResource(service);

        }

        private readonly DomainsResource domains;

        /// <summary>Gets the Domains resource.</summary>
        public virtual DomainsResource Domains
        {
            get { return domains; }
        }

        /// <summary>The "domains" collection of methods.</summary>
        public class DomainsResource
        {
            private const string Resource = "domains";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public DomainsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Creates a domain mapping on the specified site.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="parent">Required. The parent to create the domain association for, in the format: sites/site-
            /// name</param>
            public virtual CreateRequest Create(Google.Apis.FirebaseHosting.v1beta1.Data.Domain body, string parent)
            {
                return new CreateRequest(service, body, parent);
            }

            /// <summary>Creates a domain mapping on the specified site.</summary>
            public class CreateRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Domain>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.Domain body, string parent)
                    : base(service)
                {
                    Parent = parent;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Required. The parent to create the domain association for, in the format: sites/site-
                /// name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.Domain Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/domains"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                }

            }

            /// <summary>Deletes the existing domain mapping on the specified site.</summary>
            /// <param name="name">Required. The name of the domain association to delete.</param>
            public virtual DeleteRequest Delete(string name)
            {
                return new DeleteRequest(service, name);
            }

            /// <summary>Deletes the existing domain mapping on the specified site.</summary>
            public class DeleteRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string name)
                    : base(service)
                {
                    Name = name;
                    InitParameters();
                }


                /// <summary>Required. The name of the domain association to delete.</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+name}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/domains/[^/]+$",
                        });
                }

            }

            /// <summary>Gets a domain mapping on the specified site.</summary>
            /// <param name="name">Required. The name of the domain configuration to get.</param>
            public virtual GetRequest Get(string name)
            {
                return new GetRequest(service, name);
            }

            /// <summary>Gets a domain mapping on the specified site.</summary>
            public class GetRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Domain>
            {
                /// <summary>Constructs a new Get request.</summary>
                public GetRequest(Google.Apis.Services.IClientService service, string name)
                    : base(service)
                {
                    Name = name;
                    InitParameters();
                }


                /// <summary>Required. The name of the domain configuration to get.</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "get"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+name}"; }
                }

                /// <summary>Initializes Get parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/domains/[^/]+$",
                        });
                }

            }

            /// <summary>Lists the domains for the specified site.</summary>
            /// <param name="parent">Required. The parent for which to list domains, in the format: sites/site-name</param>
            public virtual ListRequest List(string parent)
            {
                return new ListRequest(service, parent);
            }

            /// <summary>Lists the domains for the specified site.</summary>
            public class ListRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.ListDomainsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string parent)
                    : base(service)
                {
                    Parent = parent;
                    InitParameters();
                }


                /// <summary>Required. The parent for which to list domains, in the format: sites/site-name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }

                /// <summary>The next_page_token from a previous request, if provided.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The page size to return. Defaults to 50.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/domains"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Updates the specified domain mapping, creating the mapping as if it does not exist.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="name">Required. The name of the domain association to update or create, if an association doesn't
            /// already exist.</param>
            public virtual UpdateRequest Update(Google.Apis.FirebaseHosting.v1beta1.Data.Domain body, string name)
            {
                return new UpdateRequest(service, body, name);
            }

            /// <summary>Updates the specified domain mapping, creating the mapping as if it does not exist.</summary>
            public class UpdateRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Domain>
            {
                /// <summary>Constructs a new Update request.</summary>
                public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.Domain body, string name)
                    : base(service)
                {
                    Name = name;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Required. The name of the domain association to update or create, if an association doesn't
                /// already exist.</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.Domain Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "update"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "PUT"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+name}"; }
                }

                /// <summary>Initializes Update parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/domains/[^/]+$",
                        });
                }

            }
        }
        private readonly ReleasesResource releases;

        /// <summary>Gets the Releases resource.</summary>
        public virtual ReleasesResource Releases
        {
            get { return releases; }
        }

        /// <summary>The "releases" collection of methods.</summary>
        public class ReleasesResource
        {
            private const string Resource = "releases";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public ReleasesResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Creates a new release which makes the content of the specified version actively display on the
            /// site.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="parent">The site that the release belongs to, in the format: sites/site-name</param>
            public virtual CreateRequest Create(Google.Apis.FirebaseHosting.v1beta1.Data.Release body, string parent)
            {
                return new CreateRequest(service, body, parent);
            }

            /// <summary>Creates a new release which makes the content of the specified version actively display on the
            /// site.</summary>
            public class CreateRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Release>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.Release body, string parent)
                    : base(service)
                {
                    Parent = parent;
                    Body = body;
                    InitParameters();
                }


                /// <summary>The site that the release belongs to, in the format: sites/site-name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }

                /// <summary>The unique identifier for a version, in the format: /sites/site-name/versions/versionID The
                /// site-name in this version identifier must match the site-name in the `parent` parameter.
                ///
                /// This query parameter must be empty if the `type` field in the request body is
                /// `SITE_DISABLE`.</summary>
                [Google.Apis.Util.RequestParameterAttribute("versionName", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string VersionName { get; set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.Release Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/releases"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                    RequestParameters.Add(
                        "versionName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "versionName",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Lists the releases that have been created on the specified site.</summary>
            /// <param name="parent">Required. The parent for which to list files, in the format: sites/site-name</param>
            public virtual ListRequest List(string parent)
            {
                return new ListRequest(service, parent);
            }

            /// <summary>Lists the releases that have been created on the specified site.</summary>
            public class ListRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.ListReleasesResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string parent)
                    : base(service)
                {
                    Parent = parent;
                    InitParameters();
                }


                /// <summary>Required. The parent for which to list files, in the format: sites/site-name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }

                /// <summary>The next_page_token from a previous request, if provided.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The page size to return. Defaults to 100.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/releases"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly VersionsResource versions;

        /// <summary>Gets the Versions resource.</summary>
        public virtual VersionsResource Versions
        {
            get { return versions; }
        }

        /// <summary>The "versions" collection of methods.</summary>
        public class VersionsResource
        {
            private const string Resource = "versions";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public VersionsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;
                files = new FilesResource(service);

            }

            private readonly FilesResource files;

            /// <summary>Gets the Files resource.</summary>
            public virtual FilesResource Files
            {
                get { return files; }
            }

            /// <summary>The "files" collection of methods.</summary>
            public class FilesResource
            {
                private const string Resource = "files";

                /// <summary>The service which this resource belongs to.</summary>
                private readonly Google.Apis.Services.IClientService service;

                /// <summary>Constructs a new resource.</summary>
                public FilesResource(Google.Apis.Services.IClientService service)
                {
                    this.service = service;

                }


                /// <summary>Lists the remaining files to be uploaded for the specified version.</summary>
                /// <param name="parent">Required. The parent to list files for, in the format: sites/site-
                /// name/versions/versionID</param>
                public virtual ListRequest List(string parent)
                {
                    return new ListRequest(service, parent);
                }

                /// <summary>Lists the remaining files to be uploaded for the specified version.</summary>
                public class ListRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.ListVersionFilesResponse>
                {
                    /// <summary>Constructs a new List request.</summary>
                    public ListRequest(Google.Apis.Services.IClientService service, string parent)
                        : base(service)
                    {
                        Parent = parent;
                        InitParameters();
                    }


                    /// <summary>Required. The parent to list files for, in the format: sites/site-
                    /// name/versions/versionID</summary>
                    [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string Parent { get; private set; }

                    /// <summary>The next_page_token from a previous request, if provided. This will be the encoded
                    /// version of a firebase.hosting.proto.metadata.ListFilesPageToken.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                    public virtual string PageToken { get; set; }

                    /// <summary>The page size to return. Defaults to 1000.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                    public virtual System.Nullable<int> PageSize { get; set; }

                    /// <summary>The type of files in the version that should be listed.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("status", Google.Apis.Util.RequestParameterType.Query)]
                    public virtual System.Nullable<StatusEnum> Status { get; set; }

                    /// <summary>The type of files in the version that should be listed.</summary>
                    public enum StatusEnum
                    {
                        [Google.Apis.Util.StringValueAttribute("STATUS_UNSPECIFIED")]
                        STATUSUNSPECIFIED,
                        [Google.Apis.Util.StringValueAttribute("EXPECTED")]
                        EXPECTED,
                        [Google.Apis.Util.StringValueAttribute("ACTIVE")]
                        ACTIVE,
                    }


                    ///<summary>Gets the method name.</summary>
                    public override string MethodName
                    {
                        get { return "list"; }
                    }

                    ///<summary>Gets the HTTP method.</summary>
                    public override string HttpMethod
                    {
                        get { return "GET"; }
                    }

                    ///<summary>Gets the REST path.</summary>
                    public override string RestPath
                    {
                        get { return "v1beta1/{+parent}/files"; }
                    }

                    /// <summary>Initializes List parameter list.</summary>
                    protected override void InitParameters()
                    {
                        base.InitParameters();

                        RequestParameters.Add(
                            "parent", new Google.Apis.Discovery.Parameter
                            {
                                Name = "parent",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = @"^sites/[^/]+/versions/[^/]+$",
                            });
                        RequestParameters.Add(
                            "pageToken", new Google.Apis.Discovery.Parameter
                            {
                                Name = "pageToken",
                                IsRequired = false,
                                ParameterType = "query",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "pageSize", new Google.Apis.Discovery.Parameter
                            {
                                Name = "pageSize",
                                IsRequired = false,
                                ParameterType = "query",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "status", new Google.Apis.Discovery.Parameter
                            {
                                Name = "status",
                                IsRequired = false,
                                ParameterType = "query",
                                DefaultValue = null,
                                Pattern = null,
                            });
                    }

                }
            }

            /// <summary>Creates a new version for a site.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="parent">Required. The parent to create the version for, in the format: sites/site-name</param>
            public virtual CreateRequest Create(Google.Apis.FirebaseHosting.v1beta1.Data.Version body, string parent)
            {
                return new CreateRequest(service, body, parent);
            }

            /// <summary>Creates a new version for a site.</summary>
            public class CreateRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Version>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.Version body, string parent)
                    : base(service)
                {
                    Parent = parent;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Required. The parent to create the version for, in the format: sites/site-name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }

                /// <summary>The self-reported size of the version. This value is used for a pre-emptive quota check for
                /// legacy version uploads.</summary>
                [Google.Apis.Util.RequestParameterAttribute("sizeBytes", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<long> SizeBytes { get; set; }

                /// <summary>A unique id for the new version. This is only specified for legacy version
                /// creations.</summary>
                [Google.Apis.Util.RequestParameterAttribute("versionId", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string VersionId { get; set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.Version Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/versions"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                    RequestParameters.Add(
                        "sizeBytes", new Google.Apis.Discovery.Parameter
                        {
                            Name = "sizeBytes",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "versionId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "versionId",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Deletes the specified version.</summary>
            /// <param name="name">Required. The name of the version to be deleted, in the format: sites/site-
            /// name/versions/versionID</param>
            public virtual DeleteRequest Delete(string name)
            {
                return new DeleteRequest(service, name);
            }

            /// <summary>Deletes the specified version.</summary>
            public class DeleteRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string name)
                    : base(service)
                {
                    Name = name;
                    InitParameters();
                }


                /// <summary>Required. The name of the version to be deleted, in the format: sites/site-
                /// name/versions/versionID</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+name}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/versions/[^/]+$",
                        });
                }

            }

            /// <summary>Lists the versions that have been created on the specified site. Will include filtering in the
            /// future.</summary>
            /// <param name="parent">Required. The parent for which to list files, in the format: sites/site-name</param>
            public virtual ListRequest List(string parent)
            {
                return new ListRequest(service, parent);
            }

            /// <summary>Lists the versions that have been created on the specified site. Will include filtering in the
            /// future.</summary>
            public class ListRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.ListVersionsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string parent)
                    : base(service)
                {
                    Parent = parent;
                    InitParameters();
                }


                /// <summary>Required. The parent for which to list files, in the format: sites/site-name</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }

                /// <summary>The filter string used to return a subset of versions in the response. Currently supported
                /// fields for filtering are: name, status, and create_time. Filter processing will be implemented in
                /// accordance with go/filtering.</summary>
                [Google.Apis.Util.RequestParameterAttribute("filter", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string Filter { get; set; }

                /// <summary>The next_page_token from a previous request, if provided.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>The maximum number of versions to return. The service may return fewer than this value. If
                /// unspecified, at most 25 versions will be returned. The maximum value is 100; values above 100 will
                /// be coerced to 100</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}/versions"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+$",
                        });
                    RequestParameters.Add(
                        "filter", new Google.Apis.Discovery.Parameter
                        {
                            Name = "filter",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Updates the specified metadata for a version. Note that this method will fail with
            /// `FAILED_PRECONDITION` in the event of an invalid state transition. The only valid transition for a
            /// version is currently from a `CREATED` status to a `FINALIZED` status. Use
            /// [`DeleteVersion`](../sites.versions/delete) to set the status of a version to `DELETED`.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="name">The unique identifier for a version, in the format: sites/site-name/versions/versionID This name
            /// is provided in the response body when you call the [`CreateVersion`](../sites.versions/create)
            /// endpoint.</param>
            public virtual PatchRequest Patch(Google.Apis.FirebaseHosting.v1beta1.Data.Version body, string name)
            {
                return new PatchRequest(service, body, name);
            }

            /// <summary>Updates the specified metadata for a version. Note that this method will fail with
            /// `FAILED_PRECONDITION` in the event of an invalid state transition. The only valid transition for a
            /// version is currently from a `CREATED` status to a `FINALIZED` status. Use
            /// [`DeleteVersion`](../sites.versions/delete) to set the status of a version to `DELETED`.</summary>
            public class PatchRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.Version>
            {
                /// <summary>Constructs a new Patch request.</summary>
                public PatchRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.Version body, string name)
                    : base(service)
                {
                    Name = name;
                    Body = body;
                    InitParameters();
                }


                /// <summary>The unique identifier for a version, in the format: sites/site-name/versions/versionID This
                /// name is provided in the response body when you call the [`CreateVersion`](../sites.versions/create)
                /// endpoint.</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }

                /// <summary>A set of field names from your [version](../sites.versions) that you want to update. A
                /// field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a
                /// default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be used.</summary>
                [Google.Apis.Util.RequestParameterAttribute("updateMask", Google.Apis.Util.RequestParameterType.Query)]
                public virtual object UpdateMask { get; set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.Version Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "patch"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "PATCH"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+name}"; }
                }

                /// <summary>Initializes Patch parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/versions/[^/]+$",
                        });
                    RequestParameters.Add(
                        "updateMask", new Google.Apis.Discovery.Parameter
                        {
                            Name = "updateMask",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Adds content files to a version.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="parent">Required. The version to add files to, in the format: sites/site-
            /// name/versions/versionID</param>
            public virtual PopulateFilesRequest PopulateFiles(Google.Apis.FirebaseHosting.v1beta1.Data.PopulateVersionFilesRequest body, string parent)
            {
                return new PopulateFilesRequest(service, body, parent);
            }

            /// <summary>Adds content files to a version.</summary>
            public class PopulateFilesRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.PopulateVersionFilesResponse>
            {
                /// <summary>Constructs a new PopulateFiles request.</summary>
                public PopulateFilesRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.PopulateVersionFilesRequest body, string parent)
                    : base(service)
                {
                    Parent = parent;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Required. The version to add files to, in the format: sites/site-
                /// name/versions/versionID</summary>
                [Google.Apis.Util.RequestParameterAttribute("parent", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Parent { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.FirebaseHosting.v1beta1.Data.PopulateVersionFilesRequest Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "populateFiles"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+parent}:populateFiles"; }
                }

                /// <summary>Initializes PopulateFiles parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "parent", new Google.Apis.Discovery.Parameter
                        {
                            Name = "parent",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^sites/[^/]+/versions/[^/]+$",
                        });
                }

            }
        }

        /// <summary>Gets the Hosting metadata for a specific site.</summary>
        /// <param name="name">Required. The site for which to get the SiteConfig, in the format: sites/site-
        /// name/config</param>
        public virtual GetConfigRequest GetConfig(string name)
        {
            return new GetConfigRequest(service, name);
        }

        /// <summary>Gets the Hosting metadata for a specific site.</summary>
        public class GetConfigRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.SiteConfig>
        {
            /// <summary>Constructs a new GetConfig request.</summary>
            public GetConfigRequest(Google.Apis.Services.IClientService service, string name)
                : base(service)
            {
                Name = name;
                InitParameters();
            }


            /// <summary>Required. The site for which to get the SiteConfig, in the format: sites/site-
            /// name/config</summary>
            [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Name { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "getConfig"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+name}"; }
            }

            /// <summary>Initializes GetConfig parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "name", new Google.Apis.Discovery.Parameter
                    {
                        Name = "name",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^sites/[^/]+/config$",
                    });
            }

        }

        /// <summary>Sets the Hosting metadata for a specific site.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="name">Required. The site for which to update the SiteConfig, in the format: sites/site-
        /// name/config</param>
        public virtual UpdateConfigRequest UpdateConfig(Google.Apis.FirebaseHosting.v1beta1.Data.SiteConfig body, string name)
        {
            return new UpdateConfigRequest(service, body, name);
        }

        /// <summary>Sets the Hosting metadata for a specific site.</summary>
        public class UpdateConfigRequest : FirebaseHostingBaseServiceRequest<Google.Apis.FirebaseHosting.v1beta1.Data.SiteConfig>
        {
            /// <summary>Constructs a new UpdateConfig request.</summary>
            public UpdateConfigRequest(Google.Apis.Services.IClientService service, Google.Apis.FirebaseHosting.v1beta1.Data.SiteConfig body, string name)
                : base(service)
            {
                Name = name;
                Body = body;
                InitParameters();
            }


            /// <summary>Required. The site for which to update the SiteConfig, in the format: sites/site-
            /// name/config</summary>
            [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Name { get; private set; }

            /// <summary>A set of field names from your [site configuration](../sites.SiteConfig) that you want to
            /// update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a
            /// default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.</summary>
            [Google.Apis.Util.RequestParameterAttribute("updateMask", Google.Apis.Util.RequestParameterType.Query)]
            public virtual object UpdateMask { get; set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.FirebaseHosting.v1beta1.Data.SiteConfig Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "updateConfig"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PATCH"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+name}"; }
            }

            /// <summary>Initializes UpdateConfig parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "name", new Google.Apis.Discovery.Parameter
                    {
                        Name = "name",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^sites/[^/]+/config$",
                    });
                RequestParameters.Add(
                    "updateMask", new Google.Apis.Discovery.Parameter
                    {
                        Name = "updateMask",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.FirebaseHosting.v1beta1.Data
{    

    /// <summary>Contains metadata about the user who performed an action, such as creating a release or finalizing a
    /// version.</summary>
    public class ActingUser : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The email address of the user when the user performed the action.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("email")]
        public virtual string Email { get; set; } 

        /// <summary>A profile image URL for the user. May not be present if the user has changed their email address or
        /// deleted their account.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("imageUrl")]
        public virtual string ImageUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a DNS certificate challenge.</summary>
    public class CertDnsChallenge : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The domain name upon which the DNS challenge must be satisfied.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("domainName")]
        public virtual string DomainName { get; set; } 

        /// <summary>The value that must be present as a TXT record on the domain name to satisfy the
        /// challenge.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("token")]
        public virtual string Token { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents an HTTP certificate challenge.</summary>
    public class CertHttpChallenge : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The URL path on which to serve the specified token to satisfy the certificate challenge.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("path")]
        public virtual string Path { get; set; } 

        /// <summary>The token to serve at the specified URL path to satisfy the certificate challenge.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("token")]
        public virtual string Token { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not
    /// exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the
    /// Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to
    /// that service receive a `404` error).</summary>
    public class CloudRunRewrite : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if
        /// not supplied.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("region")]
        public virtual string Region { get; set; } 

        /// <summary>Required. User-defined ID of the Cloud Run service.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serviceId")]
        public virtual string ServiceId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The intended behavior and status information of a domain.</summary>
    public class Domain : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. The domain name of the association.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("domainName")]
        public virtual string DomainName { get; set; } 

        /// <summary>If set, the domain should redirect with the provided parameters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("domainRedirect")]
        public virtual DomainRedirect DomainRedirect { get; set; } 

        /// <summary>Output only. Information about the provisioning of certificates and the health of the DNS
        /// resolution for the domain.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("provisioning")]
        public virtual DomainProvisioning Provisioning { get; set; } 

        /// <summary>Required. The site name of the association.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("site")]
        public virtual string Site { get; set; } 

        /// <summary>Output only. Additional status of the domain association.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>Output only. The time at which the domain was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual object UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The current certificate provisioning status information for a domain.</summary>
    public class DomainProvisioning : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The TXT records (for the certificate challenge) that were found at the last DNS fetch.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("certChallengeDiscoveredTxt")]
        public virtual System.Collections.Generic.IList<string> CertChallengeDiscoveredTxt { get; set; } 

        /// <summary>The DNS challenge for generating a certificate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("certChallengeDns")]
        public virtual CertDnsChallenge CertChallengeDns { get; set; } 

        /// <summary>The HTTP challenge for generating a certificate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("certChallengeHttp")]
        public virtual CertHttpChallenge CertChallengeHttp { get; set; } 

        /// <summary>The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate
        /// for the domain.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("certStatus")]
        public virtual string CertStatus { get; set; } 

        /// <summary>The IPs found at the last DNS fetch.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("discoveredIps")]
        public virtual System.Collections.Generic.IList<string> DiscoveredIps { get; set; } 

        /// <summary>The time at which the last DNS fetch occurred.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dnsFetchTime")]
        public virtual object DnsFetchTime { get; set; } 

        /// <summary>The DNS record match status as of the last DNS fetch.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dnsStatus")]
        public virtual string DnsStatus { get; set; } 

        /// <summary>The list of IPs to which the domain is expected to resolve.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("expectedIps")]
        public virtual System.Collections.Generic.IList<string> ExpectedIps { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but
    /// replace the requested domain with the one specified in the redirect configuration.</summary>
    public class DomainRedirect : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. The domain name to redirect to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("domainName")]
        public virtual string DomainName { get; set; } 

        /// <summary>Required. The redirect status code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance:
    ///
    /// service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    ///
    /// The JSON representation for `Empty` is empty JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A [`header`](/docs/hosting/full-config#headers) defines custom headers to add to a response should the
    /// request URL path match the pattern.</summary>
    public class Header : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The user-supplied [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match against
        /// the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("glob")]
        public virtual string Glob { get; set; } 

        /// <summary>Required. The additional headers to add to the response.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("headers")]
        public virtual System.Collections.Generic.IDictionary<string,string> Headers { get; set; } 

        /// <summary>The user-supplied RE2 regular expression to match against the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("regex")]
        public virtual string Regex { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListDomainsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list of domains, if any exist.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("domains")]
        public virtual System.Collections.Generic.IList<Domain> Domains { get; set; } 

        /// <summary>The pagination token, if more results exist.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListReleasesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>If there are additional releases remaining beyond the ones in this response, then supply this token
        /// in the next [`list`](../sites.versions.files/list) call to continue with the next set of releases.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The list of hashes of files that still need to be uploaded, if any exist.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("releases")]
        public virtual System.Collections.Generic.IList<Release> Releases { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListVersionFilesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list path/hashes in the specified version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("files")]
        public virtual System.Collections.Generic.IList<VersionFile> Files { get; set; } 

        /// <summary>The pagination token, if more results exist.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListVersionsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The pagination token, if more results exist</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The list of versions, if any exist.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("versions")]
        public virtual System.Collections.Generic.IList<Version> Versions { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class PopulateVersionFilesRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A set of file paths to the hashes corresponding to assets that should be added to the version. Note
        /// that a file path to an empty hash will remove the path from the version. Calculate a hash by Gzipping the
        /// file then taking the SHA256 hash of the newly compressed file.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("files")]
        public virtual System.Collections.Generic.IDictionary<string,string> Files { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class PopulateVersionFilesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The content hashes of the specified files that need to be uploaded to the specified
        /// endpoint.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uploadRequiredHashes")]
        public virtual System.Collections.Generic.IList<string> UploadRequiredHashes { get; set; } 

        /// <summary>The URL to which the files should be uploaded, in the format: "https://upload-
        /// firebasehosting.googleapis.com/upload/sites/site-name/versions/versionID/files". Perform a multipart `POST`
        /// of the Gzipped file contents to the URL using a forward slash and the hash of the file appended to the
        /// end.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uploadUrl")]
        public virtual string UploadUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Version preview configuration. If active and unexpired, this version will be accessible via a custom
    /// URL even if it is not the currently released version.</summary>
    public class PreviewConfig : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>If true, preview URLs are enabled for this version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("active")]
        public virtual System.Nullable<bool> Active { get; set; } 

        /// <summary>Indicates the expiration time for previewing this version; preview URL requests received after this
        /// time will 404.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("expireTime")]
        public virtual object ExpireTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A [`redirect`](/docs/hosting/full-config#redirects) represents the configuration for returning an HTTP
    /// redirect response given a matching request URL path.</summary>
    public class Redirect : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The user-supplied [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match against
        /// the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("glob")]
        public virtual string Glob { get; set; } 

        /// <summary>Required. The value to put in the HTTP location header of the response. The location can contain
        /// capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to
        /// capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location":
        /// "https://example.com/foo/:capture"</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("location")]
        public virtual string Location { get; set; } 

        /// <summary>The user-supplied RE2 regular expression to match against the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("regex")]
        public virtual string Regex { get; set; } 

        /// <summary>Required. The status HTTP code to return in the response. It must be a valid 3xx status
        /// code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("statusCode")]
        public virtual System.Nullable<int> StatusCode { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be
    /// public at a particular time.</summary>
    public class Release : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The deploy description when the release was created. The value can be up to
        /// 512characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("message")]
        public virtual string Message { get; set; } 

        /// <summary>Output only. The unique identifier for the release, in the format: sites/site-
        /// name/releases/releaseID This name is provided in the response body when you call the
        /// [`CreateRelease`](sites.releases/create) endpoint.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Output only. The time at which the version is set to be public.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("releaseTime")]
        public virtual object ReleaseTime { get; set; } 

        /// <summary>Output only. Identifies the user who created the release.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("releaseUser")]
        public virtual ActingUser ReleaseUser { get; set; } 

        /// <summary>Explains the reason for the release. Specify a value for this field only when creating a
        /// `SITE_DISABLE` type release.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>Output only. The configuration and content that was released.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public virtual Version Version { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A [`rewrite`](/docs/hosting/full-config#rewrites) represents an internal content rewrite on the
    /// version. If the pattern matches, the request will be handled as if it were to the destination path specified in
    /// the configuration.</summary>
    public class Rewrite : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The request will be forwarded to Firebase Dynamic Links.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dynamicLinks")]
        public virtual System.Nullable<bool> DynamicLinks { get; set; } 

        /// <summary>The function to proxy requests to. Must match the exported function name exactly.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("function")]
        public virtual string Function { get; set; } 

        /// <summary>The user-supplied [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match against
        /// the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("glob")]
        public virtual string Glob { get; set; } 

        /// <summary>The URL path to rewrite the request to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("path")]
        public virtual string Path { get; set; } 

        /// <summary>The user-supplied RE2 regular expression to match against the request URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("regex")]
        public virtual string Regex { get; set; } 

        /// <summary>The request will be forwarded to Cloud Run.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("run")]
        public virtual CloudRunRewrite Run { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The configuration for how incoming requests to a site should be routed and processed before serving
    /// content. The patterns are matched and applied according to a specific [priority order](/docs/hosting/full-
    /// config#hosting_priority_order).</summary>
    public class ServingConfig : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>How to handle well known App Association files.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("appAssociation")]
        public virtual string AppAssociation { get; set; } 

        /// <summary>Defines whether to drop the file extension from uploaded files.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cleanUrls")]
        public virtual System.Nullable<bool> CleanUrls { get; set; } 

        /// <summary>A list of custom response headers that are added to the content if the request URL path matches the
        /// glob.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("headers")]
        public virtual System.Collections.Generic.IList<Header> Headers { get; set; } 

        /// <summary>A list of globs that will cause the response to redirect to another location.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("redirects")]
        public virtual System.Collections.Generic.IList<Redirect> Redirects { get; set; } 

        /// <summary>A list of rewrites that will act as if the service were given the destination URL.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rewrites")]
        public virtual System.Collections.Generic.IList<Rewrite> Rewrites { get; set; } 

        /// <summary>Defines how to handle a trailing slash in the URL path.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trailingSlashBehavior")]
        public virtual string TrailingSlashBehavior { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A `SiteConfig` contains metadata associated with a specific site that controls Firebase Hosting serving
    /// behavior</summary>
    public class SiteConfig : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of FINALIZED versions that will be held for a site before automatic deletion. When a new
        /// version is deployed, content for versions in storage in excess of this number will be deleted, and will no
        /// longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an
        /// unlimited number of max_versions by default.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maxVersions")]
        public virtual System.Nullable<long> MaxVersions { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A `Version` is the collection of configuration and [static files](sites.versions.files) that determine
    /// how a site is displayed.</summary>
    public class Version : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The configuration for the behavior of the site. This configuration exists in the
        /// [`firebase.json`](/docs/cli/#the_firebasejson_file) file.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("config")]
        public virtual ServingConfig Config { get; set; } 

        /// <summary>Output only. The time at which the version was created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("createTime")]
        public virtual object CreateTime { get; set; } 

        /// <summary>Output only. Identifies the user who created the version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("createUser")]
        public virtual ActingUser CreateUser { get; set; } 

        /// <summary>Output only. The time at which the version was `DELETED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deleteTime")]
        public virtual object DeleteTime { get; set; } 

        /// <summary>Output only. Identifies the user who `DELETED` the version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deleteUser")]
        public virtual ActingUser DeleteUser { get; set; } 

        /// <summary>Output only. The total number of files associated with the version. This value is calculated after
        /// a version is `FINALIZED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fileCount")]
        public virtual System.Nullable<long> FileCount { get; set; } 

        /// <summary>Output only. The time at which the version was `FINALIZED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("finalizeTime")]
        public virtual object FinalizeTime { get; set; } 

        /// <summary>Output only. Identifies the user who `FINALIZED` the version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("finalizeUser")]
        public virtual ActingUser FinalizeUser { get; set; } 

        /// <summary>The labels used for extra metadata and/or filtering.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("labels")]
        public virtual System.Collections.Generic.IDictionary<string,string> Labels { get; set; } 

        /// <summary>The unique identifier for a version, in the format: sites/site-name/versions/versionID This name is
        /// provided in the response body when you call the [`CreateVersion`](../sites.versions/create)
        /// endpoint.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Version preview configuration for the site version. This configuration specfies whether previewing
        /// is enabled for this site version. Version previews allow you to preview your site at a custom URL before
        /// releasing it as the live version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("preview")]
        public virtual PreviewConfig Preview { get; set; } 

        /// <summary>The deploy status of a version.
        ///
        /// For a successful deploy, call the [`CreateVersion`](sites.versions/create) endpoint to make a new version
        /// (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then
        /// [update](sites.versions/patch) the version to the `FINALIZED` status.
        ///
        /// Note that if you leave the version in the `CREATED` state for more than 12hours, the system will
        /// automatically mark the version as `ABANDONED`.
        ///
        /// You can also change the status of a version to `DELETED` by calling the
        /// [`DeleteVersion`](sites.versions/delete) endpoint.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>Output only. The total stored bytesize of the version. This value is calculated after a version is
        /// `FINALIZED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("versionBytes")]
        public virtual System.Nullable<long> VersionBytes { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A static content file that is part of a version.</summary>
    public class VersionFile : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The SHA256 content hash of the file.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hash")]
        public virtual string Hash { get; set; } 

        /// <summary>The URI at which the file's content should display.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("path")]
        public virtual string Path { get; set; } 

        /// <summary>Output only. The current status of a particular file in the specified version. The value will be
        /// either `pending upload` or `uploaded`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
